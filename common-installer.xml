<!-- These targets are used by netbeans ide -->
<project name="rti-common-installer" default="-fail">
    <import file="common-build.xml"/>
    
    <target name="-init-installer" depends="-init-deps,-init-jre">
        <property name="nsis.file" value="${product.name}.nsi" description="the nsis file to use for creating an installer"/>
        <property name="nsis.defines" value="" description="additional defines to pass to nsis - in form of /DNAME=VALUE separated with spaces"/>
        <property name="preferred.heap.size" value="256m" description="preferred vm heap size for exe launcher"/>
        <property name="install.name" value="install" description="the name of the local install folder within the dist directory"/>
        <property name="install.dir" value="${dist.dir}/${install.name}" description="the location of the local-install"/>
    	<property name="exe.name" value="${exe.name}" description="the name of the exe file"/>
        <property name="exe.version" value="${product.version}" description="the n.n.n.n version to place in the exe file"/>
        <property name="nsis.version" value="${exe.version}" description="the version to use in the nsis installer setup.exe and other locations (menu,etc)"/>
        <property name="license.file" value="" description="if set, the license file to copy into local install"/>
        <property name="exe.jre" value="${rti.jre.version}" description="the name of the jre version (142,150,16) for install"/>
        <property name="exe.jre.path" value="..\\jre_${exe.jre}" description="the relative path from exe to jre"/>
        <property name="app.home.token" value="rti.app.home" description="the name of the system property passed by the executable to java that holds the location of the install"/>
        <property name="installer.icon" value="${product.icon}"/>
        <property name="zip.prefix" value="${product.name}-${product.version}"/>
        <property name="zip.name" value="${dist.dir}/${zip.prefix}.zip"/>
        <condition property="license.file.isset" value="true">
            <isset property="license.skip"/>
        </condition>
        <isPropertySet name="license.file"/>
        <isPropertySet name="java.main.class"/>
        <condition property="java.min.version" value="1.4.2">
            <equals arg1="${java.target.version}" arg2="1.4"/>
        </condition>
        <condition property="java.min.version" value="1.5.0">
            <equals arg1="${java.target.version}" arg2="1.5"/>
        </condition>
        <condition property="java.min.version" value="1.6.0">
            <equals arg1="${java.target.version}" arg2="1.6"/>
        </condition>
        <condition property="java.min.version" value="1.7.0">
            <equals arg1="${java.target.version}" arg2="1.7"/>
        </condition>
        <condition property="java.min.version" value="1.8.0">
            <equals arg1="${java.target.version}" arg2="1.8"/>
        </condition>
    </target>
    
    <target name="exe" description="generate an executable using launch4j" depends="-standard-exe"/>
    
    <target name="clean-and-build-installer" description="clean and build local install, then create nsis installer" depends="clean-and-build-local-install,installer"/>
    
    <target name="installer" description="Create an nsis installer for this product" depends="-pre-installer,local-install,-post-installer,-nsis-installer"/>
    
    <target name="installer-only" description="Create nsis an installer - does not call any other targets" depends="-nsis-installer"/>
    
    <target name="-nsis-installer" description="Do the actual work to build the installer" depends="-init-installer">
        <property name=".nsis.defines" value="/DVERSION=${nsis.version} ${nsis.defines}"/>
        <nsisinstaller nsi="${nsis.file}" defines="${.nsis.defines}"/>
    </target>
    
    <target name="clean-and-build-local-install" description="clean all deps, local install and then rebuild local-install" depends="clean-deps,clean-local-install,local-install"/>
    
    <target name="-clean-logs" description="clean log directories before installer">
        <delete dir="${install.dir}/logs" includes="*" failonerror="false"/>
    </target>
    
    <target name="-pre-installer" depends="-clean-logs" description="Hook to execute before installer"/>
    <target name="-post-installer" description="Hook to execute after installer"/>
    
    <target name="local-install" description="build local installation and executable (if java.main.class defined)" depends="jar-deps,-local-install,exe"/>
    <target name="local-install-no-deps" description="build local installation without building any dependencies" depends="jar-no-deps,-local-install"/>

    <target name="clean-local-install" description="clean local installation only - does not clean deps or anything else" depends="-init-installer">
        <delete failonerror="false" dir="${install.dir}"/>
    </target>
    
    <target name="local-install-no-build" description="do local install without building, just collect previously built products" depends="-local-install"/>
    
    <target name="-install-jre" depends="-init-installer" unless="no.jre.install">
        <mkdir dir="${install.dir}/jre_${exe.jre}"/>
        <copy failonerror="false" todir="${install.dir}/jre_${exe.jre}">
            <fileset dir="${jre.src.dir}"/>
        </copy>
    </target>
    
    <target name="install-license" description="perform license installation" depends="generate-license,-install-license"/>
    
    <target name="generate-license" unless="license.file.isset" depends="-bootstrap-cipher" description="Generate a license file">
        <fail unless="license.owner" message="Must define 'license.owner' property"/>
        <fail unless="license.type" message="Must define 'license.type' property"/>
        <genlicense owner="${license.owner}" type="${license.type}"/>
    </target>

    <target name="zip-dist" depends="local-install,-zip-dist" description="create zip dist"/>
    <target name="zip-dist-no-jre" depends="local-install,-zip-dist-no-jre" description="create zip dist"/>
    <target name="zip-dist-no-deps" depends="local-install-no-deps,-zip-dist" description="create zip dist"/>
    <target name="zip-dist-no-deps-no-jre" depends="local-install-no-deps,-zip-dist-no-jre" description="create zip dist"/>

    <target name="-zip-dist">
        <zip destfile="${zip.name}">
            <zipfileset dir="${install.dir}" prefix="${zip.prefix}"/>
        </zip>
    </target>
    
    <target name="-zip-dist-no-jre">
        <zip destfile="${zip.name}">
            <zipfileset dir="${install.dir}" prefix="${zip.prefix}">
                <exclude name="jre*/**"/>
            </zipfileset>
        </zip>
    </target>
    
    <target name="-local-install" depends="-init-installer,-standard-local-install,-standard-exe,-install-jre,install-license,-install-local"/>
        
    <target name="-install-local" description="hook to copy additional resources into local-install"/>
        
    <target name="-standard-local-install">
        <standard-local-install installDir="${install.dir}"/>
    </target>
    
    <target name="-install-license" if="license.file.isset" unless="license.skip">
        <!--
        <condition property="fail.on.missing.license" value="false" else="true">
            <equals arg1="${license.file}" arg2="none"/>
        </condition>
        -->
    	<!-- TODO SAM 2012-04-01 The license.dest should not be .cfg because that is used to configure software -->
        <property name="license.dest" value="${product.name}.cfg"/>
        <property name=".license.dest" value="${install.dir}/system/${license.dest}"/>
        <copy overwrite="true" failonerror="${fail.on.missing.license}" tofile="${.license.dest}" file="${license.file}"/>
    </target>
    
    <target name="-standard-exe" if="java.main.class.isset" depends="-init-installer">
        <launch4j-exe/>
    </target>
    
    <target name="-bootstrap-cipher" depends="-init">
    	<!-- TODO SAM 2014-12-03 Don't think we need this anymore since TSTool.cfg does not include encrypted license
        <ant antfile="${rti.build.home}/externals/RTiCipher/conf/build.xml" dir="${rti.build.home}/externals/RTiCipher" target="jar"/>
        -->
    </target>
    
    <macrodef name="standard-local-install" description="perform a local install for a 'standard' app">
        <attribute name="licenseOwner" default="Demo User"/>
        <attribute name="licenseType" default="Demo"/>
        <attribute name="installDir"/>
        <sequential>
            <property name="license.owner" value="@{licenseOwner}"/>
            <property name="license.type" value="@{licenseType}"/>
            
            <mkdir dir="@{installDir}"/>
            <mkdir dir="@{installDir}/bin"/>
            <mkdir dir="@{installDir}/doc"/>
            <mkdir dir="@{installDir}/system"/>
            <mkdir dir="@{installDir}/logs"/>
            
            <gather-jars installDir="@{installDir}/bin"/>
        </sequential>
    </macrodef>

    <macrodef name="gather-jars" description="copy all jar dependencies to a directory">
        <attribute name="installDir"/>
        <sequential>
            <collectjars refid="collected.jar.files" excludes="${product.disabled.jars},${local.install.disabled.jars}"/>
            <copy todir="@{installDir}" flatten="true" failonerror="false">
                <path refid="collected.jar.files"/>
            </copy>
        </sequential>
    </macrodef>

    <macrodef name="sign-jars" description="sign jars">
        <attribute name="jarDir"/>
        <attribute name="keystore"/>
        <attribute name="alias"/>
        <attribute name="storepass"/>
        <sequential>
            <signjar alias="@{alias}" keystore="@{keystore}" storepass="@{storepass}">
                <path>
                    <fileset dir="@{jardir}" includes="**/*.jar"/>
                </path>
            </signjar>
        </sequential>
    </macrodef>
    
    <macrodef name="exe-version-check">
        <attribute name="versionString"/>
        <attribute name="propertyName"/>
        <sequential>
            <condition property="version.ok">
                <matches pattern="\d+\.\d+\.\d+\.\d+" string="@{versionString}"/>
            </condition>
            <fail unless="version.ok">@{propertyName} must be defined with a value in the form 'x.x.x.x', not @{versionString}</fail>
        </sequential>
    </macrodef>
    
    <macrodef name="launch4j-exe">
        <attribute name="destDir" default="${install.dir}/bin"/>
        <!-- <attribute name="exe" default="${product.name}"/> -->
    	<attribute name="exe" default="${exe.name}"/>
        <attribute name="exeVersion" default="${exe.version}"/>
        <attribute name="mainClass" default="${java.main.class}"/>
        <attribute name="productIcon" default="${installer.icon}"/>
        <attribute name="jrePath" default="${exe.jre.path}"/>
        <attribute name="preferredHeapSize" default="${preferred.heap.size}"/>
        <attribute name="minVersion" default="${java.min.version}"/>
        <attribute name="homeToken" default="${app.home.token}"/>
        <attribute name="headerType" default="gui"/>
        <element name="chdir" optional="true"/>
        <element name="opts" optional="true"/>
        <element name="args" optional="true"/>
        <sequential>
            <property name="full.icon.path" location="@{productIcon}"/>
            <exe-version-check versionString="${exe.version}" propertyName="exe.version"/>
            <echoxml file="${dist.dir}/launch4j.xml">
                <launch4jConfig>
                    <headerType>@{headerType}</headerType>
                    <outfile>@{exe}.exe</outfile>
                    <jar>${jar.name}</jar>
                    <stayAlive>true</stayAlive>
                    <dontWrapJar>true</dontWrapJar>
                    <icon>${full.icon.path}</icon>
                    <chdir/>
                    <args/>
                    <classPath>
                        <mainClass>@{mainClass}</mainClass>
                        <cp>%EXEDIR%/*.jar</cp>	
                    </classPath>
                    <jre>
                        <path>@{jrePath}</path>
                        <minVersion>@{minVersion}</minVersion>
                        <opt>-D@{homeToken}="%EXEDIR%"/..</opt>
                        <opts/>
                    </jre>
                    <versionInfo>
                        <fileVersion>@{exeVersion}</fileVersion>
                        <txtFileVersion>${product.version}</txtFileVersion>
                        <fileDescription>${product.name}</fileDescription>
                        <copyright>Exists</copyright>
                        <productVersion>@{exeVersion}</productVersion>
                        <txtProductVersion>${product.version}</txtProductVersion>
                        <productName>${product.name}</productName>
                        <companyName>OpenCDSS</companyName>
                        <internalName>${product.name}</internalName>
                        <originalFilename>@{exe}.exe</originalFilename>
                    </versionInfo>
                </launch4jConfig>
            </echoxml>
            <property name="launch4j.dir" location="${rti.build.home}/lib/launch4j" />
            <taskdef name="launch4j" classname="net.sf.launch4j.ant.Launch4jTask"
    classpath="${launch4j.dir}/launch4j.jar:${launch4j.dir}/lib/xstream.jar" />
            <launch4j configFile="${dist.dir}/launch4j.xml"/>
            <move file="${dist.dir}/@{exe}.exe" todir="@{destDir}"/>
            <delete file="${dist.dir}/launch4j.xml"/>
        </sequential>
    </macrodef>
    
    <macrodef name="nsisinstaller" description="invoke makensis">
        <attribute name="dir" default="${nsis.dir}"/>
        <attribute name="exe" default="${nsis.exe}"/>
        <attribute name="nsi"/>
        <attribute name="defines" default=""/>
        <sequential>
            <available property="nsi.file.exists" file="@{dir}/@{nsi}"/>
            <available property="jre.packed" file="${exe.jre}/lib/rt.pack.gz"/>
            <exec executable="@{exe}" failonerror="true">
                <arg line="@{defines}"/>
                <arg value="/DJRE_VERSION=${exe.jre}"/>
                <arg value="/DJRE_PACKED=${jre.packed}"/>
                <arg value="/NOCD"/> <!-- Do Not Change directory-->
                <arg value="@{dir}/@{nsi}"/>
            </exec>
        </sequential>
    </macrodef>
    
    <macrodef name="genlicense">
        <attribute name="expirationCount" default="1"/>
        <attribute name="expirationUnit" default="month"/>
        <attribute name="product" default="${product.name}"/>
        <attribute name="count" default="NoLimit"/>
        <attribute name="outfile" default="${install.dir}/system/@{product}.cfg"/>
        <attribute name="append" default="false"/>
        <attribute name="owner"/>
        <attribute name="type"/>
        <sequential>
            <taskdef name="licensegen" classpath="${rti.build.home}/externals/RTiCipher/dist/RTiCipher_142.jar" classname="RTi.App.RTiCipher.GenerateLicenseTask"/>
            <tstamp>
                <format property="expires" offset="@{expirationCount}" pattern="yyyyMMdd" unit="@{expirationUnit}"/>
            </tstamp>
            <property name="product" value="${product.name}"/>
            <licensegen product="@{product}" licenseOwner="@{owner}" licenseType="@{type}" licenseCount="@{count}" licenseExpires="${expires}" property="licensekey"/>
            <echo file="@{outfile}" append="@{append}">
                [@{product}]
                LicenseOwner=@{owner}
                LicenseType=@{type}
                LicenseCount=@{count}
                LicenseExpires=${expires}
                LicenseKey=${licensekey}
            </echo>
        </sequential>
    </macrodef>
    
</project>
