<!-- These targets are used by netbeans ide -->
<project name="rti-common-installer" default="-fail">
    <import file="common-build.xml"/>
    
    <target name="-init-installer" depends="-init-deps,-init-jre">
        <property name="nsis.file" value="${product.name}.nsi" description="the nsis file to use for creating an installer"/>
        <property name="preferred.heap.size" value="256m" description="preferred vm heap size for exe launcher"/>
        <property name="install.name" value="install" description="the name of the local install folder within the dist directory"/>
        <property name="install.dir" value="${dist.dir}/${install.name}" description="the location of the local-install"/>
        <property name="exe.version" value="${product.version}" description="the n.n.n.n version to place in the exe file"/>
        <property name="license.file" value="" description="if set, the license file to copy into local install"/>
        <property name="exe.jre" value="${rti.jre.version}" description="the name of the jre version (142,150) for install"/>
        <isPropertySet name="license.file"/>
        <isPropertySet name="java.main.class"/>
    </target>
    
    <target name="exe" description="generate an executable using launch4j" depends="-standard-exe"/>
    
    <target name="clean-and-build-installer" description="clean and build local install, then create nsis installer" depends="clean-and-build-local-install,installer"/>
    
    <target name="installer" description="Create an nsis installer for this product" depends="-init,-pre-installer,local-install,-post-installer">
        <nsisinstaller nsi="${nsis.file}"/>
    </target>
    
    <target name="installer-only" description="Create nsis an installer - does not call any other targets" depends="-init">
        <nsisinstaller nsi="${nsis.file}"/>
    </target>
    
    <target name="clean-and-build-local-install" description="clean all deps, local install and then rebuild local-install" depends="clean-deps,clean-install,local-install"/>
    
    <target name="-clean-logs" description="clean log directories before installer">
        <delete dir="${install.dir}/logs" includes="*" failonerror="false"/>
    </target>
    
    <target name="-pre-installer" depends="-clean-logs" description="Hook to execute before installer"/>
    <target name="-post-installer" description="Hook to execute after installer"/>
    
    <target name="local-install" description="build local installation and executable (if java.main.class defined)" depends="jar-deps,-local-install,exe"/>
    <target name="local-install-no-deps" description="build local installation without building any dependencies" depends="jar-no-deps,-local-install"/>

    <target name="clean-install" description="clean local installation only - does not clean deps or anything else" depends="-init-installer">
        <delete failonerror="false" dir="${install.dir}"/>
    </target>
    
    <target name="local-install-no-build" description="do local install without building, just collect previously built products" depends="-local-install"/>
    
    <target name="-install-jre" depends="-init-installer">
        <mkdir dir="${install.dir}/jre_${exe.jre}"/>
        <copy failonerror="false" todir="${install.dir}/jre_${exe.jre}">
            <fileset dir="${jre.src.dir}"/>
        </copy>
    </target>
    
    <target name="install-license" description="perform license installation" depends="generate-license,-install-license"/>
    
    <target name="generate-license" unless="license.file.isset" depends="-bootstrap-cipher" description="Generate a license file">
        <fail unless="license.owner" message="Must define 'license.owner' property"/>
        <fail unless="license.type" message="Must define 'license.type' property"/>
        <genlicense owner="${license.owner}" type="${license.type}"/>
    </target>
    
    <target name="-local-install" depends="-init-installer,-standard-local-install,-standard-exe,-install-jre,install-license,-install-local"/>
        
    <target name="-install-local" description="hook to copy additional resources into local-install"/>
        
    <target name="-standard-local-install">
        <standard-local-install installDir="${install.dir}"/>
    </target>
    
    <target name="-install-license" if="license.file.isset">
        <copy failonerror="true" todir="${install.dir}/system" file="${license.file}"/>
    </target>
    
    <target name="-standard-exe" if="java.main.class.isset" depends="-init-installer">
        <condition property="java.min.version" value="1.4.2">
            <equals arg1="${java.target.version}" arg2="142"/>
        </condition>
        <condition property="java.min.version" value="1.5.0">
            <equals arg1="${java.target.version}" arg2="150"/>
        </condition>
        <exe-version-check versionString="${exe.version}" propertyName="exe.version"/>
        <launch4j-exe/>
    </target>
    
    <target name="-bootstrap-cipher" depends="-init">
        <ant antfile="${rtibuild.dir}/externals/RTiCipher/conf/build.xml" dir="${rtibuild.dir}/externals/RTiCipher" target="jar"/>
    </target>
    
    <macrodef name="standard-local-install" description="perform a local install for a 'standard' app">
        <attribute name="licenseOwner" default="Demo User"/>
        <attribute name="licenseType" default="Demo"/>
        <attribute name="installDir"/>
        <sequential>
            <property name="license.owner" value="@{licenseOwner}"/>
            <property name="license.type" value="@{licenseType}"/>
            
            <mkdir dir="@{installDir}"/>
            <mkdir dir="@{installDir}/bin"/>
            <mkdir dir="@{installDir}/doc"/>
            <mkdir dir="@{installDir}/system"/>
            <mkdir dir="@{installDir}/logs"/>
            
            <collectjars refid="collected.jar.files" excludes="${product.disabled.jars}"/>
            <copy todir="@{installDir}/bin" flatten="true">
                <path refid="collected.jar.files"/>
            </copy>
        </sequential>
    </macrodef>
    
    <macrodef name="exe-version-check">
        <attribute name="versionString"/>
        <attribute name="propertyName"/>
        <sequential>
            <condition property="version.ok">
                <matches pattern="\d+\.\d+\.\d+\.\d+" string="@{versionString}"/>
            </condition>
            <fail unless="version.ok">@{propertyName} must be defined with a value in the form 'x.x.x.x', not @{versionString}</fail>
        </sequential>
    </macrodef>
    
    <macrodef name="launch4j-exe">
        <attribute name="destDir" default="${install.dir}/bin"/>
        <attribute name="exe" default="${product.name}"/>
        <attribute name="exeVersion" default="${exe.version}"/>
        <attribute name="mainClass" default="${java.main.class}"/>
        <!-- product.icon is specified with respect to root directory,
        but launch4j-exe runs in dist -->
        <attribute name="productIcon" default="${product.icon}"/>
        <attribute name="jreName" default="${exe.jre}"/>
        <attribute name="preferredHeapSize" default="${preferred.heap.size}"/>
        <attribute name="minVersion" default="1.4.2"/>
        <element name="opts" optional="true"/>
        <element name="args" optional="true"/>
        <sequential>
            <exe-version-check versionString="@{exeVersion}" propertyName="exeVersion"/>
            <property name="full.icon.path" location="@{productIcon}"/>
            <echoxml file="${dist.dir}/launch4j.xml">
                <launch4jConfig>
                    <headerType>0</headerType>
                    <outfile>@{exe}.exe</outfile>
                    <jar>${jar.name}</jar>
                    <customProcName>true</customProcName>
                    <dontWrapJar>true</dontWrapJar>
                    <icon>${full.icon.path}</icon>
                    <args/>
		    <classPath>
			<mainClass>@{mainClass}</mainClass>
			<cp>%EXEDIR%/*.jar</cp>	
		    </classPath>
                    <jre>
                        <path>..\\jre_@{jreName}</path>
                        <minVersion>@{minVersion}</minVersion>
                        <opts/>
                    </jre>
                    <versionInfo>
                        <fileVersion>@{exeVersion}</fileVersion>
                        <txtFileVersion>${product.version}</txtFileVersion>
                        <fileDescription>${product.name}</fileDescription>
                        <copyright>Exists</copyright>
                        <productVersion>@{exeVersion}</productVersion>
                        <txtProductVersion>${product.version}</txtProductVersion>
                        <productName>${product.name}</productName>
                        <companyName>RTi</companyName>
                        <internalName>${product.name}</internalName>
                        <originalFilename>@{exe}.exe</originalFilename>
                    </versionInfo>
                </launch4jConfig>
            </echoxml>
            <property name="launch4j.dir" location="${rti.build.home}/lib/launch4j" />
            <taskdef name="launch4j" classname="net.sf.launch4j.ant.Launch4jTask"
    classpath="${launch4j.dir}/launch4j.jar:${launch4j.dir}/lib/xstream.jar" />
            <launch4j configFile="${dist.dir}/launch4j.xml"/>
            <move file="${dist.dir}/@{exe}.exe" todir="@{destDir}"/>
            <delete file="${dist.dir}/launch4j.xml"/>
        </sequential>
    </macrodef>
    
    <macrodef name="nsisinstaller" description="invoke makensis">
        <attribute name="dir" default="${nsis.dir}"/>
        <attribute name="exe" default="${nsis.exe}"/>
        <attribute name="nsi"/>
        <sequential>
            <available property="nsi.file.exists" file="@{dir}/@{nsi}"/>
            <exec dir="@{dir}" executable="@{exe}" failonerror="true">
                <arg value="@{nsi}"/>
            </exec>
        </sequential>
    </macrodef>
    
    <macrodef name="genlicense">
        <attribute name="expirationCount" default="1"/>
        <attribute name="expirationUnit" default="month"/>
        <attribute name="product" default="${product.name}"/>
        <attribute name="count" default="NoLimit"/>
        <attribute name="outfile" default="${install.dir}/system/@{product}.cfg"/>
        <attribute name="append" default="false"/>
        <attribute name="owner"/>
        <attribute name="type"/>
        <sequential>
            <taskdef name="licensegen" classpath="${rtibuild.dir}/externals/RTiCipher/dist/RTiCipher_142.jar" classname="RTi.App.RTiCipher.GenerateLicenseTask"/>
            <tstamp>
                <format property="expires" offset="@{expirationCount}" pattern="yyyyMMdd" unit="@{expirationUnit}"/>
            </tstamp>
            <property name="product" value="${product.name}"/>
            <licensegen product="@{product}" licenseOwner="@{owner}" licenseType="@{type}" licenseCount="@{count}" licenseExpires="${expires}" property="licensekey"/>
            <echo file="@{outfile}" append="@{append}">
                [@{product}]
                LicenseOwner=@{owner}
                LicenseType=@{type}
                LicenseCount=@{count}
                LicenseExpires=${expires}
                LicenseKey=${licensekey}
            </echo>
        </sequential>
    </macrodef>
    
</project>
