<project name="rti-common" default="-fail">
    <target name="-fail">
        <fail message="Do not call this build directly" />
    </target>      
    
    <target name="bootstrap" description="build the rtibuild dependencies" unless="skip.bootstrap">
        <ant inheritall="false" dir="${ant.file.rti-common}/.." antfile="conf/build.xml" target="jar">
            <property name="skip.bootstrap" value="true"/>
        </ant>
        <property name="skip.bootstrap" value="true"/>
    </target>
    
    <property name="rti.build.home" location="${ant.file.rti-common}/../"/>
    <path id="emma.libs">
        <pathelement location="${rti.build.home}/lib/emma.jar" />
        <pathelement location="${rti.build.home}/lib/emma_ant.jar" />
    </path>
    <taskdef resource="emma_ant.properties" classpathref="emma.libs" />
    
    <target name="-init" depends="-init-props,bootstrap,-init-plugins"/>
    
    <!--Properties that common build uses
        generate-with: grep -o '${[a-z.]*}' common-build.xml | tr -d '${}' | sort | uniq
	-->
        
    <target name="-init-props">
        
        <!-- Product specific details should never go into the user properties,
             it should only be used to specify jdk or other common tool/library
             paths
        -->
        <property file="${user.home}/.rtibuild.properties"/>
        <property file="conf/product-user.properties" />
        <condition property="os.properties" value="unix.properties">
            <os family="unix"/>
        </condition>
        <property file="${rti.build.home}/conf/${os.properties}"/>
        <property file="conf/product.properties" />
        
        <!-- hard coded defaults - if defined in the above files, they
             will be overridden -->
        <property name="product.disabled.jars" value="" description="A list of jars to exclude from an installer - matching is based upon the token appearing anywhere in the jar name"/>
        <property name="fork.javac" value="true" description="Whether to fork javac or not (true or false)"/>
        <property name="jdoc.includes" value="**/*.java" description="A list of files to include in javadoc"/>
        <property name="jdoc.excludes" value="docs/javadoc" description="A list of files to exclude in javadoc"/>
        <property name="java.src.version" value="1.4" description="The java source level to pass to the compiler"/>
        <property name="java.target.version" value="1.4" description="The java byte code target level to pass to the compiler"/>
        <property name="javac.includes" value="**/*.java" description="Files to include in compilation"/>
        <property name="javac.excludes" value="" description="Files to exclude from compilation"/>
        <property name="ext.dir" value="externals" description="The directory for externals with contents defined by svn:externals"/>
        <property name="src.dir" value="src" description="The directory for source code"/>
        <property name="graphics.dir" value="graphics" description="The directory for graphics resources"/>
        <property name="test.dir" value="test" description="The name of a test directory"/>
        <property name="build.dir" value="bin" description="The name of a build directory"/>
        <property name="test.build.dir" value="${test.dir}/bin" description="The name of a test build directory"/>
        <property name="dist.dir" value="dist" description="The name of a distributable directory"/>
        <property name="jdoc.dir" value="doc/javadoc" description="The name of a javadoc directory"/>
        <property name="nsis.dir" value="installer" description="The name of the nsis installer directory"/>
        <property name="nsis.exe" value="S:\DEVELOP\NSIS\makensis.exe" description="The full path to the NSIS exe"/>
        <property name="logs.dir" value="test/logs" />
        <property name="javac.debug" value="true" description="A flag to pass to javac for including debugging"/>
        <property name="jar.extra.includes" value="" description="A list of includes to use for adding to jars"/>
        <property name="jar.excludes" value="" description="A list of excludes for jar building"/>
        <property name="default.jar.excludes" value="**/*.svn,${jar.excludes}" description="The default excludes - do not change this - instead change jar.excludes"/>
        <property name="product.icon" value="${rti.build.home}/resources/RTi.ico" description="The product icon used in installers, exe, etc."/>
        <property name="coverage.dir" location="${test.dir}/coverage" description="emma coverage output directory"/>
        <property name="emma.filter" value="rti.*, RTi.*" description="emma includes filter"/>
        
        <!-- computed properties-->
        <property name="jar.includes" value="**/*.png,**/*.gif,**/*.jpg,**/*.class/,**/*.properties,META-INF/**/*,${jar.extra.includes}" />
        <property name="jar.name" value="${product.name}_${product.version}.jar" />
        <property name="jar.file" value="${dist.dir}/${jar.name}"/>
        
        <property name="run.classpath" value="" description="The classpath to use during execution"/>
        <property name="build.classpath" value="" description="The classpath to use during compilation"/>
        <property name="test.classpath" value="" description="The classpath to use during test execution"/>
        
        <!-- required from product -->
        <required-property name="product.name" description="The name of the product"/>
        <required-property name="product.version" description="The version of the product"/>
        
        <!-- common jars -->
        <property name="junit.jar" value="${rti.build.home}/lib/junit-3.8.1.jar"/>
    </target>
    
    <target name="-init-plugins">
        <path id="rti.buildtools.path" path="${rti.build.home}/dist/rtibuild_1_0.jar"/>
        <taskdef name="collectjars" classpathref="rti.buildtools.path" classname="rti.build.ant.CollectJarDependencies" onerror="ignore"/>
        <taskdef name="collectproducts" classpathref="rti.buildtools.path" classname="rti.build.ant.CollectProductDependencies" onerror="ignore"/>        
    </target>
    
    <target name="-init-deps" depends="-init">
        <available property="rtibuild.present" file="${rti.build.home}/dist/rtibuild_1_0.jar"/>
        <fail unless="rtibuild.present" message="Please run the bootstrap target to build rtibuild ant extensions"/>
        <available property="rtibuild.present" file="${rti.build.home}/dist/rtibuild_1_0.jar"/>
        <fail unless="rtibuild.present" message="Please run the bootstrap target to build rtibuild ant extensions"/>
        <echo level="verbose">Disabled jars : ${product.disabled.jars}</echo>
        <collectjars useBuildDirs="true" excludes="${product.disabled.jars}"/>
        <property name="run.classpath.computed" value="${build.dir}:${build.classpath}:${collected.jar.deps}" description="The final computed classpath - do not change this"/>
        <path id="collected.deps.path"/>
    </target>
    
    <target name="-init-jre" depends="-init-props">
        <condition property="jre.base.dir" value="/opt">
            <os family="unix"/>
        </condition>
        <condition property="jre.142.name" value="jre1.4.2">
            <os family="unix"/>
        </condition>
        <condition property="jre.150.name" value="jre1.5.0">
            <os family="unix"/>
        </condition>
        <condition property="rti.jre.version" value="142">
            <equals arg1="${java.src.version}" arg2="1.4"/> 
        </condition>
        <condition property="rti.jre.version" value="150">
            <equals arg1="${java.src.version}" arg2="1.5"/> 
        </condition>
        <condition property="rti.jre.version" value="16">
            <equals arg1="${java.src.version}" arg2="1.6"/>
        </condition>
        <!-- defaults, if the above rules haven't set the jres, these will -->
        <property name="jre.142.name" value="jre_142" />
        <property name="jre.150.name" value="jre_150" />
        <property name="jre.160.name" value="jre_16" />
        <property name="jre.base.dir" value="s:/DEVELOP/" description="The location to search for jres"/>
        <condition property="jre.src.dir" value="${jre.base.dir}/${jre.142.name}">
            <equals arg1="${java.src.version}" arg2="1.4"/> 
        </condition>
        <condition property="jre.src.dir" value="${jre.base.dir}/${jre.150.name}">
            <equals arg1="${java.src.version}" arg2="1.5"/> 
        </condition>
        <condition property="jre.src.dir" value="${jre.base.dir}/${jre.160.name}">
            <equals arg1="${java.src.version}" arg2="1.6"/>
        </condition>
    </target>
    
    <target name="-init-jdk" depends="-init-props">
        <condition property="jdk.base.dir" value="/opt">
            <os family="unix"/>
        </condition>
        <condition property="java.142.name" value="jdk1.4.2">
            <os family="unix"/>
        </condition>
        <condition property="java.150.name" value="jdk1.5.0">
            <os family="unix"/>
        </condition>
        <!-- defaults - if the above don't apply, these will -->
        <property name="jdk.base.dir" value="s:/DEVELOP/" description="The location to search for jdks"/>
        <property name="java.142.name" value="jdk_142" />
        <property name="java.150.name" value="jdk_150" />
        <property name="java.160.name" value="jdk_16" />
    </target>
    
    <target name="-init-javac" depends="-init-jdk">
        <condition property="jdk.build.home" value="${jdk.base.dir}/${java.142.name}">
            <equals arg1="${java.src.version}" arg2="1.4" />
        </condition>
        <condition property="jdk.build.home" value="${jdk.base.dir}/${java.150.name}">
            <equals arg1="${java.src.version}" arg2="1.5" />
        </condition>
        <condition property="jdk.build.home" value="${jdk.base.dir}/${java.160.name}">
            <equals arg1="${java.src.version}" arg2="1.6" />
        </condition>
        <property name="javac.exe" value="${jdk.build.home}/bin/javac" description="The javac executable to use when forking"/>
    </target>
    
    <target name="-init-java" depends="-init-jdk">
        <property name="java.run.version" value="${java.src.version}"/>
        <condition property="jdk.run.home" value="${jdk.base.dir}/${java.142.name}">
            <equals arg1="${java.run.version}" arg2="1.4" />
        </condition>
        <condition property="jdk.run.home" value="${jdk.base.dir}/${java.150.name}">
            <equals arg1="${java.run.version}" arg2="1.5" />
        </condition>
        <condition property="jdk.run.home" value="${jdk.base.dir}/${java.160.name}">
            <equals arg1="${java.run.version}" arg2="1.6" />
        </condition>
        <property name="java.exe" value="${jdk.run.home}/bin/java" description="The java executable to use when executing"/>
    </target>
    
    <target name="-enable-emma" depends="-init-build">
        <property name="emma.enabled" value="true" />
        <mkdir dir="${coverage.dir}"/>
    </target>
    
    <target name="-emma" depends="-init-build" unless="emma.disabled">
        <emma enabled="${emma.enabled}" >
            <instr instrpath="${build.dir}"
                   destdir="${coverage.dir}/instr"
                   metadatafile="${coverage.dir}/metadata.emma"
                   merge="true">
                       <filter includes="${emma.filter}"/>
                       </instr>
        </emma>
    </target>
    
    <target name="-init-build" depends="-init">
        <property name="java.main.vmargs" value="" description="VM arguments to pass to java during development execution"/>
        <property name="java.main.cwd" value="${basedir}" description="The current working directory to run with"/>
        <property name="java.main.class" value="undefined" description="The main class to run with"/>
        <property name="coverage.dir" location="${test.dir}/coverage" description="emma coverage output directory"/>
        <property name="emma.filter" value="rti.*, RTi.*" description="emma includes filter"/>
    </target>
    
    <target name="ant-doc" description="Generate ant documentation" depends="-init">
        <taskdef name="antdoc" classpathref="rti.buildtools.path" classname="rti.build.ant.GenerateBuildDoc" onerror="ignore"/>
        <antdoc/>
    </target>
    
    <macrodef name="requireprop">
        <attribute name="name"/>
        <attribute name="message" default="The property @{name} must be defined."/>
        <sequential>
            <condition property="@{name}.undefined">
                <equals arg1="${@{name}}" arg2="undefined"/>
            </condition>
            <fail if="@{name}.undefined" message="@{message}"/>
            <fail unless="@{name}" message="@{message}"/>
        </sequential>
    </macrodef>
    
    <macrodef name="required-property">
        <attribute name="name"/>
        <attribute name="description"/>
        <sequential>
            <condition property="@{name}.undefined">
                <equals arg1="${@{name}}" arg2="undefined"/>
            </condition>
            <fail if="@{name}.undefined" message="@{name} must be defined"/>
            <fail unless="@{name}" message="product must define property @{name}" />
            <property name="@{name}" description="@{description}" value=""/>
        </sequential>
    </macrodef>
    
    <macrodef name="isPropertySet">
        <attribute name="name"/>
        <attribute name="isset" default="@{name}.isset"/>
        <sequential>
            <condition property="@{isset}">
                <and>
                    <isset property="@{name}"/>
                    <not>
                        <equals arg1="${@{name}}" arg2=""/>
                    </not>
                </and>
            </condition>
        </sequential>
    </macrodef>
    
    <macrodef name="dojar">
        <attribute name="jar"/>
        <attribute name="dist.dir" default="${dist.dir}" />
        <attribute name="dir" default="${build.dir}" />
        <attribute name="includes" default="${jar.includes}" />
        <attribute name="excludes" default="${default.jar.excludes}" />
        <attribute name="compress" default="false" />
        <attribute name="mainClass" default="${java.main.class}"/>
        <element name="zipfiles" optional="true"/>
        <element name="atts" optional="true"/>
        <sequential>
            <tstamp />
            <mkdir dir="@{dist.dir}" />
            <jar destfile="@{dist.dir}/@{jar}" excludes="@{excludes}" compress="@{compress}">
                <manifest>
                    <attribute name="Built-By" value="${user.name}" />
                    <attribute name="Specification-Title" value="${product.name}" />
                    <attribute name="Specification-Version" value="${product.version}" />
                    <attribute name="Specification-Vendor" value="Riverside Technology Inc." />
                    <attribute name="Implementation-Version" value="${DSTAMP}" />
                    <atts/>
                </manifest>
                <fileset dir="@{dir}" includes="@{includes}" excludes="@{excludes}"/>
                <zipfiles/>
            </jar>
        </sequential>
    </macrodef>
    
    <macrodef name="aptcompile">
        <attribute name="includes" default="${javac.includes}" />
        <attribute name="excludes" default="${javac.excludes}" />
        <attribute name="src" />
        <attribute name="source" default="${java.src.version}" />
        <attribute name="target" default="${java.target.version}" />
        <attribute name="dest" />
        <attribute name="debug" default="true" />
        <attribute name="deprecation" default="on" />
        <attribute name="useant" default="no" />
        <attribute name="cp" />
        <attribute name="factory"/>
        <attribute name="factorycp" default="rti.buildtools.path"/>
        <sequential>
            <mkdir dir="@{dest}" />
            <apt srcdir="@{src}" source="@{source}" target="@{target}" 
                 includes="@{includes}" excludes="@{excludes}" 
                 destdir="@{dest}" debug="@{debug}" deprecation="@{deprecation}" 
                 includeAntRuntime="@{useant}" 
                 failonerror="true" factory="@{factory}" factorypathref="@{factorycp}">
                <classpath>
                    <path path="@{cp}" />
                </classpath>
            </apt>
        </sequential>
    </macrodef>
    
    <macrodef name="javacompile">
        <attribute name="includes" default="${javac.includes}" />
        <attribute name="excludes" default="${javac.excludes}" />
        <attribute name="src" />
        <attribute name="source" default="${java.src.version}" />
        <attribute name="target" default="${java.target.version}" />
        <attribute name="dest" />
        <attribute name="fork" default="${fork.javac}" />
        <attribute name="debug" default="true" />
        <attribute name="deprecation" default="on" />
        <attribute name="executable" default="${javac.exe}" />
        <attribute name="useant" default="no" />
        <attribute name="failOnError" default="true"/>
        <attribute name="cp" />
        <sequential>
            <mkdir dir="@{dest}" />
            <javac srcdir="@{src}" source="@{source}" target="@{target}" 
                   includes="@{includes}" excludes="@{excludes}" 
                   destdir="@{dest}" debug="@{debug}" deprecation="@{deprecation}" 
                   executable="@{executable}" includeAntRuntime="@{useant}" 
                   fork="@{fork}" failonerror="@{failOnError}">
                <classpath>
                    <path path="@{cp}" />
                </classpath>
            </javac>
        </sequential>
    </macrodef>
    
    <macrodef name="runjava">
        <attribute name="main" />
        <attribute name="cp" />
        <attribute name="dir" default="${basedir}"/>
        <attribute name="args" default="" />
        <element name="vmargs" optional="true"/>
        <sequential>
            <echo>@{cp} @{main}</echo>
            <java classname="@{main}" fork="true" jvm="${java.exe}" dir="@{dir}">
                <jvmarg line="-Xmx256m"/>
                <jvmarg line="-ea"/>
                <classpath>
                    <path path="@{cp}" />
                </classpath>
                <vmargs/>
                <arg line="@{args}" />
            </java>
        </sequential>
    </macrodef>
    
    <macrodef name="deps" description="build dependencies">
        <attribute name="target" />
        <attribute name="products"/>
        <attribute name="inheritall" default="false"/>
        <attribute name="inheritrefs" default="false"/>
        <attribute name="deps" default="nodeps"/>
        <element name="inherited" optional="true"/>
        <sequential>
            <echo>calling @{target} in deps @{products}</echo>
            <subant target="@{target}" antfile="conf/build.xml" inheritall="@{inheritall}" inheritrefs="@{inheritrefs}">
                <property name="@{deps}" value="@{deps}"/>
                <!-- hack for netbeans projects -->
                <property name="platform.home" value="${jdk.build.home}"/>
                <property name="skip-bootstrap" value="${skip-bootstrap}"/>
                <inherited/>
                <filelist dir="." files="@{products}"/>
            </subant>
        </sequential>
    </macrodef>
    
</project>
