<!--
this build should be imported by each products top-level build file that is
located in conf
-->

<project name="rti-common-build" default="-fail">
    
    <import file="common.xml"/>
    
    <target name="-pre-compile-java" description="hook target called before compilation"/>
    
    <target name="compile-nodeps" description="Compile java but do not compile dependencies" depends="-init">
        <property name="nodeps" value="true"/>
        <antcall inheritall="true" target="compile"/>
    </target>
    
    <target name="-compile-deps" if="product.deps" unless="nodeps">
        <echo level="verbose">compiling deps for ${product.name} : ${product.deps}</echo>
        <collectproducts separator="," property="collected.product.deps"/>
        <deps target="compile" products="${collected.product.deps}"/>
    </target>
    
    <target name="-compile-java" depends="-init,-pre-compile-java,-init-javac,-compile-deps" >
        <javacompile src="${src.dir}" dest="${build.dir}" cp="${build.classpath}"/>
    </target>
    
    <target name="compile" description="Compile product and all dependencies, including tests" depends="-init,-pre-compile-java,-init-javac,-compile-deps,-compile-java,-check-tests,-compile-tests" >
        <echo level="verbose">compiling ${product.name}</echo>
        <copy todir="${build.dir}">
            <fileset dir="${src.dir}" includes="${jar.includes}" excludes="${default.jar.excludes}" />
        </copy>
        <condition property="no.graphics">
            <not><available file="graphics"/></not>
        </condition>
        <antcall target="-copy-graphics"/>
    </target>
    
    <target name="-copy-graphics" unless="no.graphics">
        <copy todir="${build.dir}">
            <fileset dir="${graphics.dir}" includes="**/*"/>
        </copy>
    </target>
    
    <target name="build" depends="clean,compile" description="clean and compile this product"/>
    
    <target name="javadoc" description="Create javadocs" depends="-init,-init-java">
        <mkdir dir="${jdoc.dir}"/>
        <javadoc destdir="${jdoc.dir}">
            <classpath>
                <path path="${build.classpath}" />
            </classpath>
            <packageset dir="${src.dir}" includes="rti/**,RTi/**"/>
            <tag name="todo"/>
            <tag name="revisit"/>
        </javadoc>
    </target>
    
    <target name="clean" description="Clean class files and jar file, including tests" depends="-init">
        <delete dir="${build.dir}" quiet="true" />
        <delete quiet="true">
            <fileset dir="${dist.dir}" includes="*.jar"/>
        </delete>
        <delete dir="${test.build.dir}" quiet="true" />
        <delete dir="${coverage.dir}" quiet="true" />
    </target>
    
    <target name="clean-deps" depends="-init,-init-deps,clean" if="product.deps" description="clean this product and all dependencies">
        <collectproducts separator=","/>
        <deps target="clean" products="${collected.product.deps}"/>
    </target>
    
    <target name="clean-all" description="Clean all build products" depends="-init,clean">
        <delete dir="${jdoc.dir}" quiet="true" />
        <delete dir="${dist.dir}" quiet="true" />
        <delete dir="${test.dir}/results" quiet="true" />
    </target>
    
    <target name="clean-all-deps" description="Clean all build products and clean-all on all dependencies" depends="-init,-init-deps,clean-all">
        <collectproducts separator="," property="collected.product.deps"/>
        <deps target="clean-all" products="${collected.product.deps}"/>
    </target>
    
    <target name="test" description="Run all tests" depends="-init,-check-tests,compile">
        <fail unless="tests.exist" message="No build file exists for this product - create one at ${test.dir}/build.xml"/>
        <ant antfile="${test.dir}/build.xml" target="all-tests" />
    </target>
    
    <target name="-check-tests">
        <available filepath="${test.dir}" file="build.xml" property="tests.exist"/>
    </target>
    
    <target name="test-deps" description="Test with dependencies" depends="-init-deps,test">
        <deps target="test" products="${collected.product.deps}"/>
    </target>
    
    <target name="-compile-tests" description="foo" depends="-check-tests" if="tests.exist">
        <!-- todo figure out way to pass emma.disabled through to here -->
        <ant antfile="${test.dir}/build.xml" target="build-all-tests"/>
    </target>
    
    <target name="run" description="Run java.main.class as defined in product" depends="-init-deps,-init-java,-init-build">
        <requireprop name="java.main.class" />
        <runjava main="${java.main.class}" cp="${run.classpath.computed}" args="${java.main.args}" dir="${java.main.cwd}">
            <vmargs><jvmarg value="${java.main.vmargs}"/></vmargs>
        </runjava>
    </target>
    
    <target name="jar" description="Create product jar from name and version" depends="compile">
        <dojar jar="${jar.name}" />
    </target>
    
    <target name="jar-no-deps" description="Create jar without calling deps" depends="compile-nodeps">
        <dojar jar="${jar.name}" />
    </target>
    
    <target name="jar-deps" description="Build all dependency jars" depends="-init">
        <deps target="jar" products="${product.deps}"/>
        <antcall target="jar-no-deps"/>
    </target>
    
    <target name="pre-release" description="Complete clean,build,test, and jar" depends="clean-deps,jar"/>
    
    <target name="profile" description="Netbeans profiler target" depends="-init-deps,compile">
        <fail unless="netbeans.home">This target can only run inside the NetBeans IDE.</fail>
        <nbprofiledirect>
            <classpath> 
                <path path="${run.classpath.computed}"/>
            </classpath>
        </nbprofiledirect>
        <java jvm="${profiler.info.jvm}" fork="true" classname="${profile.class}" classpath="${run.classpath.computed}">
            <jvmarg value="${profiler.info.jvmargs.agent}"/>
            <jvmarg line="${profiler.session.jvm.args}"/>
        </java>
    </target>
    
</project>
